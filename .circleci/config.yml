version: 2.1

orbs:
  docker: circleci/docker@0.5.13

commands:
  default-configuration:
    # default configuration stolen from my previous project that contains everything to set up a node container
    description: preparing the containers with dependencies to deploy front and back end
    steps:
      - run:
          name: Install curl, tar and gzip
          command: |
            echo installing curl, tar and gzip
            apk add --update tar gzip curl
      - run:
          name: Install ansible
          command: |
            echo Installing ansisble
            apk add --update ansible
      - run:
          name: Install nodejs and npm
          command: |
            echo installing nodejs and npm
            apk add --update nodejs npm
      - run:
          name: Install aws cli
          command: |
            echo installing awscli
            pip install awscli
  # A command taht will destroy anny stacks created in this run
  destroy-stacks:
    description: Destroy stacks
    steps:
      - run:
          name: Destroy
          when: on_fail
          command: |
            aws eks update-kubeconfig --name="my-app-${CIRCLE_SHA1:0:5}"
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            kubectl delete -f my-app-configs/
            eksctl delete cluster my-app-${CIRCLE_SHA1:0:5}

jobs:
  # a job that will run our npm test modules on our app
  # it will also build our dependency cache and add our ssh key for aws
  run_tests:
    working_directory: ~/react-app
    docker:
      - image: circleci/node:14.17.6

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fc:54:cd:b6:ea:2e:8f:2d:52:15:75:8b:ee:47:c1:39"]
      - run:
          name: update-npm
          command: "sudo npm install -g npm@latest"
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: npm-install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - dist
      - run:
          name: test
          command: npm test

  run_linting:
    # a job to run linting on both docker and js
    docker:
      # Use the same Docker base as the project
      - image: node:14.18-alpine

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install docker linter
          command: |
            npm install -g dockerlint
      - run:
          name: install js linter
          command: |
            npm install eslint --save-dev

      # run lint!
      - run:
          name: run docker lint
          command: |
            if dockerlint ./dockerfile | grep OK
              then 
                echo "docker file contains no innaccuracies"
                return 0
              else 
                echo "linter has found an error in dockerfile"
                return 1
            fi
      - run:
          name: run js lint
          command: |
            if ./node_modules/.bin/eslint ./src/App.js | grep error
              then 
                echo "javascript code contains error"
                return 1
              else 
                echo "There are no JS errors in your application"
                return 0
            fi
  # old step which would have configured an AWS EC2 to run kubernetes.. but stopped as free teir EC2s did not have enogh vcpus
  # upload_docker_image:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - default-configuration
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package.json" }}
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         # name: update s3
  #         # command: |
  #         #   tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #         #   aws s3 cp dist s3://my-app-udacity-sb --recursive
  #         name: ansible playbook run
  #         command: |
  #           ansible-playbook .circleci/ansible/setup.yml da

  deploy:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /temp/workspace
    steps:
      - checkout
      - run:
          # recording the last existing cluster from the cache
          name: record current
          command: |
            echo $(aws eks list-clusters | python3 -c "import sys, json; print(json.load(sys.stdin)['clusters'][0])") > previous-kubernetes.txt
            cat previous-kubernetes.txt
      #create the new cluster from our cluster yaml file
      - run:
          name: create new
          command: |
            sed -i "s/REPLACE/my-app-${CIRCLE_SHA1:0:5}/g" kubernetes-deploy.yml
            eksctl create cluster -f kubernetes-deploy.yml
      #record our new clusters details
      - run:
          name: record new
          command: |
            echo "my-app-${CIRCLE_SHA1:0:5}" > kubernetes.txt
            cat kubernetes.txt
      #use aws to update cluster
      - run:
          name: Deploy
          command: |
            aws eks update-kubeconfig --name "my-app-${CIRCLE_SHA1:0:5}"
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            kubectl apply -f my-app-configs/
            kubectl rollout status deployment react-my-app
      #record ip for our app access so we can test against it later
      - run:
          name: record service ip for smoke
          command: |
            echo "$(kubectl get services service-react-my-app --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > ip.txt
      - persist_to_workspace:
          root: /temp/workspace
          paths:
            - ip.txt
            - kubernetes.txt
            - previous-kubernetes.txt
      - destroy-stacks

  smoke:
    docker:
      - image: alpine/k8s:1.15.12
    steps:
      - checkout
      - attach_workspace:
          at: /temp/workspace
      - default-configuration
      - run:
          name: get curl
          command: |
            apk add curl
      - run:
          name: smoke
          command: |

            export serviceURL="$(cat /temp/workspace/ip.txt)" 
            export URL="http://"${serviceURL}":8000"
            sleep 240

            if curl ${URL} | grep "Web"
            then
              echo "port 8000 is routing to our pod at port 80 and is running our react app "
            else
              echo "Error - site not reached"
              return 1
            fi

      - destroy-stacks

  destroy-previous:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /temp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /temp/workspace
      - default-configuration
      - run:
          name: delete previous
          command: |
            OLD=$(cat /temp/workspace/previous-kubernetes.txt)
            if [ -z "$OLD" ]
            then
                  echo $OLD " is not found"
            else
                  aws eks update-kubeconfig --name="${OLD}"
                  export KUBECONFIG=/root/.kube/config
                  kubectl get svc
                  kubectl delete -f my-app-configs/
            fi
      - run:
          name: Delete prev k8
          command: |
            OLD=$(cat /temp/workspace/previous-kubernetes.txt)
            if [ -z "$OLD" ]
            then
                  echo $OLD " is not found"

            else
                  eksctl delete cluster $OLD
            fi

workflows:
  version: 2
  build_deploy:
    jobs:
      - run_tests
      - run_linting
      - docker/publish:
          image: seandbull/latest
          dockerfile: dockerfile
          requires:
            - run_tests
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - run_tests
            - run_linting
          filters:
            branches:
              only:
                - main
      - smoke:
          requires:
            - deploy
      - destroy-previous:
          requires:
            - smoke
